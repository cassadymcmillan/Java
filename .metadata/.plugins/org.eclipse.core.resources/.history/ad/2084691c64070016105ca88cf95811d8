import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * This program asks the user to input text file, and it will generates a tag
 * cloud with given number of words in alphabetical order.
 *
 * @author Sheng Wang, Bolong Zhang
 */
public final class TagCloudGeneratorSTD {

    /**
     * The separators.
     */
    private static final String SEPARATORS = " \t\n\r`~!@#$%^&*()-_+=[]{}\\|:;'\",.<>/?";

    /**
     * Minimum occurred frequency of the word.
     */
    private static int minNumber = 0;

    /**
     * Maximum occurred frequency of the word.
     */
    private static int maxNumber = 0;

    /**
     * Maximum font size.
     */
    public static final int MAX_FONT_SIZE = 48;

    /**
     * Minimum font size.
     */
    public static final int MIN_FONT_SIZE = 11;

    /**
     * Default constructor--private to prevent instantiation.
     */
    private TagCloudGeneratorSTD() {

    }

    /**
     * Comparator that compares two pairs in alphabetical order.
     */
    private static class alphebeticalComparator
            implements Comparator<Map.Entry<String, Integer>> {
        @Override
        public int compare(Map.Entry<String, Integer> pair0,
                Map.Entry<String, Integer> pair1) {

            return pair0.getKey().toLowerCase()
                    .compareTo(pair1.getKey().toLowerCase());
        }
    }

    /**
     * Comparator that compares two pairs in numerical order.
     */
    private static class numericComparator
            implements Comparator<Map.Entry<String, Integer>> {
        @Override
        public int compare(Map.Entry<String, Integer> pair0,
                Map.Entry<String, Integer> pair1) {

            return pair1.getValue() - pair0.getValue();
        }
    }

    /**
     * Check whether the character is a separator.
     *
     * @param c
     *            the character to be checked
     * @param separator
     *            the string of separators
     * @return true if the character is a separator
     */
    private static boolean isSeparator(char c, String separator) {
        boolean result = false;
        for (int i = 0; i < separator.length(); i++) {
            if (c == separator.charAt(i)) {
                result = true;
            }
        }
        return result;
    }

    /**
     * Read the words from a file and add them into a map with the word and its
     * occurred frequency.
     *
     * @param inFile
     *            the file to be read from
     * @return the map with the word and frequency
     * @ensures word is in the map.key if it is in the file && map.value is its
     *          occurred frequency
     */
    private static Map<String, Integer> readFromFile(BufferedReader inFile)
            throws IOException {
        assert inFile != null : "Violation of: file is not null";
        Map<String, Integer> map = new HashMap<String, Integer>();
        String word = "";
        int count = 0;
        int nextChar = -1;
        // Constantly add words from the file into the map
        while ((nextChar = inFile.read()) != -1) {
            char next = Character.toLowerCase((char) nextChar);
            if (isSeparator(next, SEPARATORS)) {
                if (!word.equals("")) {
                    count = 1;
                    if (map.containsKey(word)) {
                        count = map.get(word);
                        count++;
                        map.remove(word);
                    }
                    map.put(word, count);
                }
                word = "";
            } else {
                word += next;
            }
        }
        // Add the last word from the file
        if (!word.equals("")) {
            count = 1;
            if (map.containsKey(word)) {
                count = map.get(word);
                count++;
                map.remove(word);
            }
            map.put(word, count);
        }
        return map;
    }

    /**
     * Sort words in the map in the order of ({@code} numComparator), and sort
     * the first number of ({@code} size) in the order of (
     * {@code} alphComparator()).
     *
     * @param map
     *            the map of words to be sorted
     * @param size
     *            the number of words in the cloud
     * @return the subList in alphabetic order
     * @ensures subList.size == size
     */
    private static List<Map.Entry<String, Integer>> sortedWords(
            Map<String, Integer> map, int size) {
        List<Map.Entry<String, Integer>> entries = new ArrayList<Map.Entry<String, Integer>>(
                map.entrySet());
        Collections.sort(entries, new numericComparator());
        List<Map.Entry<String, Integer>> subList = entries.subList(0, size);
        maxNumber = subList.get(0).getValue();
        minNumber = subList.get(subList.size() - 1).getValue();
        Collections.sort(subList, new alphebeticalComparator());
        return subList;
    }

    /**
     * Print the (@code sortedWords) to (@code outFile) with size of the (@code
     * sortedWords) in the HTML format.
     *
     * @param sortedWords
     *            the List of words to be printed
     * @param outFile
     *            the HTML file to be printed
     * @param fileName
     *            the name of the input file
     * @ensures words in sortedWords are in the file && words in sortedWords are
     *          in the same order in the file
     */
    private static void printPage(List<Map.Entry<String, Integer>> sortedWords,
            PrintWriter outFile, String fileName) {
        // Print the file header
        outFile.println("<!DOCTYPE html>");
        outFile.println("<html>");
        outFile.println("<head>");
        outFile.println("<title>Top " + sortedWords.size() + " words in "
                + fileName + "</title>");
        outFile.println(
                "<link href=\"doc/tagcloud.css\" rel=\"stylesheet\" type=\"text/css\">");
        outFile.println("</head>");
        outFile.println("<body>");
        outFile.println("<h2>Top " + sortedWords.size() + " words in "
                + fileName + "</h2>");
        outFile.println("<hr />");
        outFile.println("<div class=\"cdiv\">");
        outFile.println("<p class=\"cbox\">");

        // Print the words
        int fontSize = MIN_FONT_SIZE;
        while (sortedWords.size() > 0) {
            Map.Entry<String, Integer> p = sortedWords.remove(0);
            if (p.getValue() == minNumber) {
                fontSize = MIN_FONT_SIZE;
            } else if (p.getValue() == maxNumber) {
                fontSize = MAX_FONT_SIZE;
            } else {
                fontSize = (int) Math.floor(
                        (MIN_FONT_SIZE + (((0.0 + p.getValue() - minNumber)
                                / (maxNumber - minNumber))
                                * (MAX_FONT_SIZE - MIN_FONT_SIZE))));
            }
            outFile.println("<span style=\"cursor:default\" class=\"f"
                    + fontSize + "\" title=\"count: " + p.getValue() + "\">"
                    + p.getKey() + "</span>");
        }

        // Print the file footer
        outFile.println("</p>");
        outFile.println("</div>");
        outFile.println("</body>");
        outFile.println("</html>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments
     */
    public static void main(String[] args) {
        BufferedReader in = new BufferedReader(
                new InputStreamReader(System.in));
        PrintWriter out = new PrintWriter(
                new BufferedWriter(new OutputStreamWriter(System.out)));
        System.out.print("Please enter the name of the input file: ");
        String inFileName;
        try {
            inFileName = in.readLine();
        } catch (IOException e) {
            System.err.println("Error while reading input file name: " + e);
            return;
        }      
        System.out.print("Please enter the name of the output file: ");
        String outFileName;
        try {
            outFileName = in.readLine();
        } catch (IOException e) {
            System.err.println("Error while reading input file name: " + e);
            return;
        }       
        System.out.print("Enter the size of the tag cloud: ");
        int size;
        try {
            size = Integer.parseInt(in.readLine());
        } catch (IOException e) {
            System.err.println("Error while reading input file name: " + e);
            return;
        }
        
        BufferedReader inFile;
        PrintWriter outFile;
        try {
            inFile = new BufferedReader(new FileReader(inFileName));
            outFile = new PrintWriter(new BufferedWriter(
                    new FileWriter(outFileName)));
        } catch (FileNotFoundException e) {
            System.err.println("File not found: " + inFileName);
            return;
        } catch (IOException e) {
            System.err.print("Error while writing input file name: " + e);
            return;
        }        

        Map<String, Integer> wordMap; 
        try {
            wordMap= readFromFile(inFile);
            List<Map.Entry<String, Integer>> sortedWords = sortedWords(wordMap,
                    size);
            printPage(sortedWords, outFile, inFileName);
        } catch (IOException e) {
            System.err.print("File does not exist.");
        }

        try {
            in.close();
            out.close();
            inFile.close();
            outFile.close();
        } catch (IOException e) {
            System.err.print("System error, files could not be closed.");
            return;
        }
    }

}
